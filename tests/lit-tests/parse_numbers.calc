// RUN:     @calcc --verbose -k -S --ast --parse -e 256                  2>&1 | @filecheck %s --check-prefix=CHECK_A
// RUN:     @calcc --verbose -k -S --ast --parse -e 9                    2>&1 | @filecheck %s --check-prefix=CHECK_B
// RUN:     @calcc --verbose -k -S --ast --parse -e -9                   2>&1 | @filecheck %s --check-prefix=CHECK_C
// RUN:     @calcc --verbose -k -S --ast --parse -e "- 9"                2>&1 | @filecheck %s --check-prefix=CHECK_C
// RUN:     @calcc --verbose -k -S --ast --parse -e "0x7FFFFFFFFFFFFFFF" 2>&1 | @filecheck %s --check-prefix=CHECK_D

// RUN: not @calcc --verbose -k -S --parse -e "0x8000000000000000"       2>&1 | @filecheck %s --check-prefix=CHECK_E
// RUN: not @calcc --verbose -k -S --parse -e "9223372036854775808"      2>&1 | @filecheck %s --check-prefix=CHECK_F
// RUN: not @calcc --verbose -k -S --parse -e "-9223372036854775809"     2>&1 | @filecheck %s --check-prefix=CHECK_G

// CHECK_A: Consumed expected token 'Number' at position '0'
// CHECK_A: AST: 256

// CHECK_B: Consumed expected token 'Number' at position '0'
// CHECK_B: AST: 9

// CHECK_C: Consumed expected token 'Minus' at position '0'
// CHECK_C: Consumed expected token 'Number' at position '1'
// CHECK_C: AST: -9

// CHECK_D: Consumed expected token 'Number' at position '0'
// CHECK_D: AST: 9223372036854775807

// CHECK_E: Number '0x8000000000000000' failed parse: number too large to fit in target type
// CHECK_E: Failed to convert hexadecimal string

// CHECK_F: Number '9223372036854775808' failed parse: number too large to fit in target type
// CHECK_F: Failed to convert decimal string

// CHECK_G: Number '-9223372036854775809' failed parse: number too small to fit in target type
// CHECK_G: Failed to convert decimal string
