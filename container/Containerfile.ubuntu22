# Copyright 2024, Giordano Salvador
# SPDX-License-Identifier: BSD-3-Clause

FROM docker.io/ubuntu:22.04

LABEL maintainer="Giordano Salvador <73959795+e3m3@users.noreply.github.com>"
USER root

ENV TERM=xterm-256color
ENV PROJECT_DIR=${HOME}/project

ENV SSL_CONF_TMP=/etc/apt/apt.conf.d/99_tmp_ssl-verify-off.conf
ENV SED_HTTPS='s%http://(.*archive|security).ubuntu.com%https://mirrors.edge.kernel.org%g'

RUN echo 'Acquire::https::Verify-Peer "false";' >${SSL_CONF_TMP}  && \
    sed --in-place=.orig --regexp-extended ${SED_HTTPS} /etc/apt/sources.list  && \
    apt-get update && apt-get install ca-certificates -y  && \
    rm ${SSL_CONF_TMP}

RUN apt-get update && apt-get upgrade -y
RUN apt-get install -y libstdc++-12-dev gcc python3-pip python3-venv curl git

# for libtinfo.a, FileCheck
# LLVM-18 is installed later
ENV LLVM_VER=15
RUN apt-get install -y llvm-${LLVM_VER} llvm-${LLVM_VER}-tools libtinfo5 libncurses-dev
ENV PATH=/usr/lib/llvm-${LLVM_VER}/bin:${PATH}

RUN apt-get clean

ENV LLVM_VER=18
ENV LLVM_DIR=clang+llvm-18.1.8-x86_64-linux-gnu-ubuntu-18.04
ENV LLVM_BIN_URL=https://github.com/llvm/llvm-project/releases/download/llvmorg-18.1.8/${LLVM_DIR}.tar.xz
RUN curl -L -o /root/llvm-package.tar.xz ${LLVM_BIN_URL}
RUN cd /root  &&  tar --no-same-owner -Jxf /root/llvm-package.tar.xz
ENV PATH=/root/${LLVM_DIR}/bin:${PATH}
ENV PATH=/root/${LLVM_DIR}/libexec:${PATH}
ENV LD_LIBRARY_PATH=/root/${LLVM_DIR}/lib:${LD_LIBRARY_PATH}
ENV C_INCLUDE_PATH=/root/${LLVM_DIR}/include:${C_INCLUDE_PATH}
ENV CPLUS_INCLUDE_PATH=/root/${LLVM_DIR}/include:${CPLUS_INCLUDE_PATH}

ENV PYTHON_VENV_PATH=/root/.python/venv
RUN python3 -m venv ${PYTHON_VENV_PATH}
ENV PATH=${PYTHON_VENV_PATH}/bin:${PATH}
RUN pip install lit

ENV RUST_CHANNEL=stable
ENV RUSTUP_HOME=/root/.rustup
ENV TOOLCHAIN=${RUST_CHANNEL}-x86_64-unknown-linux-gnu
ENV CARGO_ENV=/root/.cargo/env

RUN curl --proto '=https' --tlsv1.2 https://sh.rustup.rs -sSf -o rustup-boostrap.sh  && \
    sh rustup-boostrap.sh -y

RUN . ${CARGO_ENV}  &&  rustup update
RUN . ${CARGO_ENV}  &&  rustup toolchain install ${RUST_CHANNEL}
RUN . ${CARGO_ENV}  &&  rustup override set ${RUST_CHANNEL}

RUN mkdir -p ${PROJECT_DIR}
RUN mkdir -p ${PROJECT_DIR}/src
RUN mkdir -p ${PROJECT_DIR}/tests

COPY Cargo.toml             ${PROJECT_DIR}/
COPY rust-toolchain.toml    ${PROJECT_DIR}/
COPY LICENSE                ${PROJECT_DIR}/
COPY README.md              ${PROJECT_DIR}/
COPY src                    ${PROJECT_DIR}/src/
COPY tests                  ${PROJECT_DIR}/tests/

RUN sed --in-place=.orig 's/"force-dynamic"/"force-static"/g' ${PROJECT_DIR}/Cargo.toml

ARG BUILD_MODE=

WORKDIR ${PROJECT_DIR}
RUN . ${CARGO_ENV}  &&  cargo build --verbose ${BUILD_MODE}
RUN . ${CARGO_ENV}  &&  cargo test --verbose ${BUILD_MODE} -- --nocapture
